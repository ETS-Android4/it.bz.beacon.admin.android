/*
 * Beacon Südtirol API
 * An API to manage beacons of the Beacon Südtirol project.
 *
 * OpenAPI spec version: 1.0-beta
 * Contact: web@raiffeisen.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BeaconIssue;
import io.swagger.client.model.IssueCreation;
import io.swagger.client.model.IssueSolution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssueControllerApi {
    private ApiClient apiClient;

    public IssueControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssueControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUsingPOST2
     * @param issueCreation issueCreation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUsingPOST2Call(IssueCreation issueCreation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = issueCreation;

        // create path and map variables
        String localVarPath = "/v1/admin/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUsingPOST2ValidateBeforeCall(IssueCreation issueCreation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issueCreation' is set
        if (issueCreation == null) {
            throw new ApiException("Missing the required parameter 'issueCreation' when calling createUsingPOST2(Async)");
        }
        

        com.squareup.okhttp.Call call = createUsingPOST2Call(issueCreation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a issue
     * 
     * @param issueCreation issueCreation (required)
     * @return BeaconIssue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeaconIssue createUsingPOST2(IssueCreation issueCreation) throws ApiException {
        ApiResponse<BeaconIssue> resp = createUsingPOST2WithHttpInfo(issueCreation);
        return resp.getData();
    }

    /**
     * Create a issue
     * 
     * @param issueCreation issueCreation (required)
     * @return ApiResponse&lt;BeaconIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeaconIssue> createUsingPOST2WithHttpInfo(IssueCreation issueCreation) throws ApiException {
        com.squareup.okhttp.Call call = createUsingPOST2ValidateBeforeCall(issueCreation, null, null);
        Type localVarReturnType = new TypeToken<BeaconIssue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a issue (asynchronously)
     * 
     * @param issueCreation issueCreation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsingPOST2Async(IssueCreation issueCreation, final ApiCallback<BeaconIssue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUsingPOST2ValidateBeforeCall(issueCreation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeaconIssue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListUsingGET2
     * @param beaconId beaconId (required)
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListUsingGET2Call(Long beaconId, Boolean onlyUnresolved, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/beacons/{beaconId}/issues"
            .replaceAll("\\{" + "beaconId" + "\\}", apiClient.escapeString(beaconId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (onlyUnresolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyUnresolved", onlyUnresolved));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListUsingGET2ValidateBeforeCall(Long beaconId, Boolean onlyUnresolved, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'beaconId' is set
        if (beaconId == null) {
            throw new ApiException("Missing the required parameter 'beaconId' when calling getListUsingGET2(Async)");
        }
        

        com.squareup.okhttp.Call call = getListUsingGET2Call(beaconId, onlyUnresolved, progressListener, progressRequestListener);
        return call;

    }

    /**
     * View a list of available issues for the specified beacon ID
     * 
     * @param beaconId beaconId (required)
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @return List&lt;BeaconIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeaconIssue> getListUsingGET2(Long beaconId, Boolean onlyUnresolved) throws ApiException {
        ApiResponse<List<BeaconIssue>> resp = getListUsingGET2WithHttpInfo(beaconId, onlyUnresolved);
        return resp.getData();
    }

    /**
     * View a list of available issues for the specified beacon ID
     * 
     * @param beaconId beaconId (required)
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @return ApiResponse&lt;List&lt;BeaconIssue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeaconIssue>> getListUsingGET2WithHttpInfo(Long beaconId, Boolean onlyUnresolved) throws ApiException {
        com.squareup.okhttp.Call call = getListUsingGET2ValidateBeforeCall(beaconId, onlyUnresolved, null, null);
        Type localVarReturnType = new TypeToken<List<BeaconIssue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View a list of available issues for the specified beacon ID (asynchronously)
     * 
     * @param beaconId beaconId (required)
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListUsingGET2Async(Long beaconId, Boolean onlyUnresolved, final ApiCallback<List<BeaconIssue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListUsingGET2ValidateBeforeCall(beaconId, onlyUnresolved, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeaconIssue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListUsingGET3
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListUsingGET3Call(Boolean onlyUnresolved, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (onlyUnresolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyUnresolved", onlyUnresolved));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListUsingGET3ValidateBeforeCall(Boolean onlyUnresolved, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getListUsingGET3Call(onlyUnresolved, progressListener, progressRequestListener);
        return call;

    }

    /**
     * View a list of available issues
     * 
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @return List&lt;BeaconIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeaconIssue> getListUsingGET3(Boolean onlyUnresolved) throws ApiException {
        ApiResponse<List<BeaconIssue>> resp = getListUsingGET3WithHttpInfo(onlyUnresolved);
        return resp.getData();
    }

    /**
     * View a list of available issues
     * 
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @return ApiResponse&lt;List&lt;BeaconIssue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeaconIssue>> getListUsingGET3WithHttpInfo(Boolean onlyUnresolved) throws ApiException {
        com.squareup.okhttp.Call call = getListUsingGET3ValidateBeforeCall(onlyUnresolved, null, null);
        Type localVarReturnType = new TypeToken<List<BeaconIssue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View a list of available issues (asynchronously)
     * 
     * @param onlyUnresolved onlyUnresolved (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListUsingGET3Async(Boolean onlyUnresolved, final ApiCallback<List<BeaconIssue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListUsingGET3ValidateBeforeCall(onlyUnresolved, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeaconIssue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsingGET1
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsingGET1Call(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/issues/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsingGET1ValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsingGET1Call(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search a issue with an ID
     * 
     * @param id id (required)
     * @return BeaconIssue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeaconIssue getUsingGET1(Long id) throws ApiException {
        ApiResponse<BeaconIssue> resp = getUsingGET1WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Search a issue with an ID
     * 
     * @param id id (required)
     * @return ApiResponse&lt;BeaconIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeaconIssue> getUsingGET1WithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getUsingGET1ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BeaconIssue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search a issue with an ID (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsingGET1Async(Long id, final ApiCallback<BeaconIssue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsingGET1ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeaconIssue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUsingPOST
     * @param id id (required)
     * @param issueSolution issueSolution (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUsingPOSTCall(Long id, IssueSolution issueSolution, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = issueSolution;

        // create path and map variables
        String localVarPath = "/v1/admin/issues/{id}/resolve"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUsingPOSTValidateBeforeCall(Long id, IssueSolution issueSolution, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUsingPOST(Async)");
        }
        
        // verify the required parameter 'issueSolution' is set
        if (issueSolution == null) {
            throw new ApiException("Missing the required parameter 'issueSolution' when calling updateUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUsingPOSTCall(id, issueSolution, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a issue
     * 
     * @param id id (required)
     * @param issueSolution issueSolution (required)
     * @return BeaconIssue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeaconIssue updateUsingPOST(Long id, IssueSolution issueSolution) throws ApiException {
        ApiResponse<BeaconIssue> resp = updateUsingPOSTWithHttpInfo(id, issueSolution);
        return resp.getData();
    }

    /**
     * Update a issue
     * 
     * @param id id (required)
     * @param issueSolution issueSolution (required)
     * @return ApiResponse&lt;BeaconIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeaconIssue> updateUsingPOSTWithHttpInfo(Long id, IssueSolution issueSolution) throws ApiException {
        com.squareup.okhttp.Call call = updateUsingPOSTValidateBeforeCall(id, issueSolution, null, null);
        Type localVarReturnType = new TypeToken<BeaconIssue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a issue (asynchronously)
     * 
     * @param id id (required)
     * @param issueSolution issueSolution (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUsingPOSTAsync(Long id, IssueSolution issueSolution, final ApiCallback<BeaconIssue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUsingPOSTValidateBeforeCall(id, issueSolution, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeaconIssue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
